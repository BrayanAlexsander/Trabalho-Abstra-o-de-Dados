//AeroSales
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Scanner;

class Administrador {
    private String nomeUsuario;
    private String senha;

    public Administrador(String nomeUsuario, String senha) {
        this.nomeUsuario = nomeUsuario;
        this.senha = senha;
    }

    public boolean autenticar(String nomeUsuario, String senha) {
        return this.nomeUsuario.equals(nomeUsuario) && this.senha.equals(senha);
    }
}
class Voo {
    // ... outros membros da classe ...

    public String getOrigem() {
        return origem;
    }

    public String getDestino() {
        return destino;
    }

    // ... outros métodos da classe ...
    int numero;
    String origem;
    String destino;
    String horarioPartida;
    String horarioChegada;
    int maxPassageiros;
    List<Passageiro> reservasPendentes;

    public Voo(int numero, String origem, String destino, String horarioPartida, String horarioChegada, int maxPassageiros) {
        this.numero = numero;
        this.origem = origem;
        this.destino = destino;
        this.horarioPartida = horarioPartida;
        this.horarioChegada = horarioChegada;
        this.maxPassageiros = maxPassageiros;
        this.reservasPendentes = new ArrayList<>();
    }

    public int getNumero() {
        return numero;
    }

    public boolean adicionarReservaPendente(Passageiro passageiro) {
        if (reservasPendentes.size() < maxPassageiros) {
            reservasPendentes.add(passageiro);
            return true;
        }
        return false;
    }

    public void processarReservas() {
        while (!reservasPendentes.isEmpty()) {
            Passageiro passageiro = reservasPendentes.remove(0);
            System.out.println("Reserva confirmada para o voo " + numero + " por " + passageiro.getNome() + ".");
        }
    }

    public boolean estaCheio() {
        return reservasPendentes.size() >= maxPassageiros;
    }
}
class Passageiro {
    String nome;
    int idade;
    String cpf;
    String email;

    public Passageiro(String nome, int idade, String cpf, String email) {
        this.nome = nome;
        this.idade = idade;
        this.cpf = cpf;
        this.email = email;
    }

    public String getNome() {
        return nome;
    }
}

public class SistemaAeroporto {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Administrador admin = new Administrador("admin", "voador");

        // Autenticação do administrador
        System.out.print("Nome de usuário: ");
        String nomeUsuario = scanner.nextLine();
        System.out.print("Senha: ");
        String senha = scanner.nextLine();

        if (admin.autenticar(nomeUsuario, senha)) {
            // O administrador está autenticado, continue com o sistema
            iniciarSistema(scanner);
        } else {
            System.out.println("Acesso negado. Encerrando o sistema.");
            scanner.close();
        }
    }

    private static void iniciarSistema(Scanner scanner) {
        List<Voo> voosDisponiveis = new ArrayList<>();
        Stack<Passageiro> passageirosCheckin = new Stack<>();

        // Exemplo de voos disponíveis
        voosDisponiveis.add(new Voo(2014, "São Paulo", "Rio de Janeiro", "08:00", "09:30", 2));
        voosDisponiveis.add(new Voo(2001, "New York", "Los Angeles", "10:00", "12:00", 2));
        voosDisponiveis.add(new Voo(2002, "Rio de Janeiro", "Salvador", "11:00", "13:10", 2));

        while (true) {
            exibirMenu();
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha

            switch (opcao) {
                case 1:
                    fazerReserva(voosDisponiveis, scanner);
                    break;
                case 2:
                    processarReservas(voosDisponiveis);
                    break;
                case 3:
                    fazerCheckin(scanner);
                    break;
                case 4:
                    exibirInformacoesVoos(voosDisponiveis);
                    break;
                case 5:
                    System.out.println("Saindo do sistema. Obrigado!");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Opção inválida. Tente novamente.");
            }
        }
    }




    private static void fazerCheckin(Scanner scanner) {
    }

    private static void exibirMenu() {
        System.out.println("\nOpções:");
        System.out.println("1. Fazer reserva");
        System.out.println("2. Processar reservas pendentes");
        System.out.println("3. Fazer check-in");
        System.out.println("4. Exibir informações sobre voos");
        System.out.println("5. Sair");
        System.out.print("Escolha uma opção: ");
    }

    private static void fazerReserva(List<Voo> voosDisponiveis, Scanner scanner) {
        System.out.print("Os Números dos voos são 2014, 2001 e 2002.");
        scanner.nextLine();
        System.out.print("Selecione o número do voo desejado: ");
        int numeroVoo = scanner.nextInt();
        Voo vooSelecionado = null;

        for (Voo voo : voosDisponiveis) {
            if (voo.getNumero() == numeroVoo) {
                vooSelecionado = voo;
                break;
            }
        }

        if (vooSelecionado != null) {
            System.out.print("Digite seu nome: ");
            String nome = scanner.next(); // Use next() para ler apenas uma palavra
            System.out.print("Digite sua idade: ");
            int idade = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha
            System.out.print("Digite seu CPF: ");
            String cpf = scanner.nextLine();
            System.out.print("Digite seu e-mail: ");
            String email = scanner.nextLine();

            Passageiro passageiro = new Passageiro(nome, idade, cpf, email);

            if (vooSelecionado.adicionarReservaPendente(passageiro)) {
                System.out.println("Reserva pendente para o voo " + vooSelecionado.getNumero() +
                        " feita por " + passageiro.getNome() + ".");
            } else {
                System.out.println("O voo " + vooSelecionado.getNumero() + " está cheio. Não é possível fazer a reserva.");
            }
        } else {
            System.out.println("Voo não encontrado.");
        }
    }


    private static void processarReservas(List<Voo> voosDisponiveis) {
        for (Voo voo : voosDisponiveis) {
            if (!voo.estaCheio()) {
                System.out.println("Existem reservas pendentes para o voo " + voo.getNumero());
                voo.processarReservas();
            }
        }
    }


    private static void fazerCheckin(Scanner scanner, Stack<Passageiro> passageirosCheckin) {
        System.out.print("Digite seu nome para fazer o check-in: ");
        String nomeCheckin = scanner.nextLine();
        boolean encontrado = false;

        for (Passageiro passageiro : passageirosCheckin) {
            if (passageiro.getNome().equals(nomeCheckin)) {
                System.out.println("Você já fez o check-in.");
                encontrado = true;
                break;
            }
        }

        if (!encontrado) {
            Passageiro novoPassageiro = new Passageiro(nomeCheckin, 0, "", "");
            passageirosCheckin.push(novoPassageiro);
            System.out.println("Check-in realizado por " + novoPassageiro.getNome() + ".");
        }
    }


    private static void exibirInformacoesVoos(List<Voo> voosDisponiveis) {
        System.out.println("Voos disponíveis:");
        for (Voo voo : voosDisponiveis) {
            String status = voo.estaCheio() ? "cheio" : voo.reservasPendentes.isEmpty() ? "disponível" : "com reservas pendentes";
            System.out.println("Número: " + voo.getNumero() + ", Origem: " + voo.getOrigem() +
                    ", Destino: " + voo.getDestino() + ", Status: " + status);
        }
    }

}
